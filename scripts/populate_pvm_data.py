#!/usr/bin/env python3
"""
Script to populate the database with all PvM abilities and terrains in French.

This script will add all the abilities and terrains defined in the game logic
to the database. It can be run multiple times safely as it checks for existing
entries before creating new ones.

Usage: python manage.py runscript populate_pvm_data
"""

import os
import sys
import django

# Setup Django environment
sys.path.append('/home/runner/work/MyBlog/MyBlog')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'MyBlog.settings')
django.setup()

from Blog.models import DWPvmAbility, DWPvmTerrain


def populate_abilities():
    """Populate the database with all PvM abilities in French."""
    
    # Team abilities (to_dino=False)
    team_abilities = [
        {
            'name': 'Dernier souffle',
            'description': 'Quand un alli√© meurt, les autres r√©cup√®rent 20% de leur PV imm√©diatement.',
            'to_dino': False
        },
        {
            'name': 'Sprint pr√©historique',
            'description': '+20% de vitesse pour toute l\'√©quipe pendant les 5 premi√®res secondes du combat.',
            'to_dino': False
        },
        {
            'name': 'Esprit de meute',
            'description': '+20% d\'attaque si tous les alli√©s sont vivants, -10% sinon.',
            'to_dino': False
        },
        {
            'name': 'Bouclier collectif',
            'description': '50% des d√©g√¢ts re√ßus sont partag√©s √©quitablement entre tous les autres alli√©s vivants.',
            'to_dino': False
        },
        {
            'name': 'Instinct protecteur',
            'description': 'Quand un membre de l\'√©quipe subit un coup critique, toute l\'√©quipe gagne +30% de d√©fense pendant 2 secondes.',
            'to_dino': False
        },
        {
            'name': 'Pression croissante',
            'description': 'Toutes les 3 secondes, l\'attaque de l\'√©quipe augmente de +5%.',
            'to_dino': False
        },
        {
            'name': 'Seul contre tous',
            'description': 'S\'il ne reste qu\'un seul alli√© vivant, il gagne +25% dans toutes les statistiques.',
            'to_dino': False
        },
        {
            'name': 'Terreur collective',
            'description': 'Quand un ennemi meurt, toute l\'√©quipe gagne +15% d\'attaque pour le reste du combat.',
            'to_dino': False
        }
    ]
    
    # Individual dino abilities (to_dino=True)
    individual_abilities = [
        {
            'name': 'Mort-vivant',
            'description': 'Quand le premier alli√© meurt, il continue d\'attaquer pendant 2 secondes sans pouvoir √™tre cibl√©.',
            'to_dino': False
        },
        {
            'name': 'Fr√©n√©sie',
            'description': '+25% de vitesse d\'attaque quand les PV sont inf√©rieurs √† 50%.',
            'to_dino': True
        },
        {
            'name': 'Boureau',
            'description': 'Plus les PV de la cible sont bas, plus cette dino a de chances de la tuer instantan√©ment ((1-(PV restants/PV totaux)^2)/1.1).',
            'to_dino': True
        },
        {
            'name': 'Peau dure',
            'description': '20% de r√©duction des d√©g√¢ts quand les PV sont sup√©rieurs √† 50%.',
            'to_dino': True
        },
        {
            'name': 'Inspiration h√©ro√Øque',
            'description': 'En cas de coup critique, tous les alli√©s gagnent +25% d\'attaque pendant 1 seconde.',
            'to_dino': True
        },
        {
            'name': 'Vol de vie',
            'description': 'R√©cup√®re 30% des d√©g√¢ts inflig√©s sous forme de PV apr√®s chaque attaque.',
            'to_dino': True
        },
        {
            'name': 'Provocation',
            'description': 'Ce dino a 2 fois plus de chances d\'√™tre cibl√© par les ennemis.',
            'to_dino': True
        },
        {
            'name': 'Agilit√©e accrue',
            'description': '20% de chance d\'esquiver les attaques quand ce dino est attaqu√©.',
            'to_dino': True
        },
        {
            'name': 'Regard p√©trifiant',
            'description': 'Apr√®s avoir attaqu√©, r√©duit la vitesse de la cible de 25% pendant 3 secondes.',
            'to_dino': True
        },
        {
            'name': 'R√©g√©n√©ration',
            'description': 'Toutes les 2 secondes, r√©cup√®re 5% des PV maximum.',
            'to_dino': True
        },
        {
            'name': 'Chasseur nocturne',
            'description': 'Inflige 2x les d√©g√¢ts contre les ennemis affect√©s par du poison ou des saignements.',
            'to_dino': True
        },
        {
            'name': 'Carapace robuste',
            'description': 'Commence chaque combat avec 50% de r√©duction des d√©g√¢ts. La r√©duction diminue de 3% √† chaque coup re√ßu (minimum -25%).',
            'to_dino': True
        },
        {
            'name': 'Boost de vie',
            'description': 'Au d√©but du combat, augmente les PV maximum de 20%.',
            'to_dino': True
        },
        {
            'name': 'Boost d\'attaque',
            'description': 'Au d√©but du combat, augmente l\'attaque de 20%.',
            'to_dino': True
        },
        {
            'name': 'Boost de d√©fense',
            'description': 'Au d√©but du combat, augmente la d√©fense de 20%.',
            'to_dino': True
        },
        {
            'name': 'Boost de vitesse',
            'description': 'Au d√©but du combat, augmente la vitesse de 20%.',
            'to_dino': True
        },
        {
            'name': 'Boost de % critique',
            'description': 'Au d√©but du combat, augmente les chances de coup critique de 0.1.',
            'to_dino': True
        },
        {
            'name': 'Boost de d√©g√¢ts critiques',
            'description': 'Au d√©but du combat, augmente les d√©g√¢ts critiques de 30%.',
            'to_dino': True
        }
    ]
    
    all_abilities = team_abilities + individual_abilities
    created_count = 0
    existing_count = 0
    
    print("=== Ajout des capacit√©s PvM ===")
    
    for ability_data in all_abilities:
        ability, created = DWPvmAbility.objects.get_or_create(
            name=ability_data['name'],
            defaults={
                'description': ability_data['description'],
                'to_dino': ability_data['to_dino']
            }
        )
        
        if created:
            created_count += 1
            print(f"‚úÖ Cr√©√©e: {ability.name} ({'Individuelle' if ability.to_dino else '√âquipe'})")
        else:
            existing_count += 1
            print(f"‚ö†Ô∏è  Existe d√©j√†: {ability.name}")
    
    print(f"\nüìä R√©sum√© des capacit√©s:")
    print(f"   - Nouvelles capacit√©s cr√©√©es: {created_count}")
    print(f"   - Capacit√©s d√©j√† existantes: {existing_count}")
    print(f"   - Total: {DWPvmAbility.objects.count()} capacit√©s dans la base de donn√©es")


def populate_terrains():
    """Populate the database with all PvM terrains in French."""
    
    terrains = [
        {
            'name': 'Distorsion Spatio-Temporelle',
            'description': 'Les statistiques des dinos sont m√©lang√©es de mani√®re al√©atoire entre tous les dinos.'
        },
        {
            'name': 'Lac Putr√©fi√©',
            'description': 'Tous les dinos perdent 5% de leurs PV maximum chaque seconde.'
        },
        {
            'name': 'Brouillard Epais',
            'description': 'R√©duit de 50% la pr√©cision de tous les dinos.'
        },
        {
            'name': 'Jungle Perfide',
            'description': 'Le cooldown des capacit√©s est r√©duit de 20% pour les dinos de support.'
        },
        {
            'name': 'Ere Glaciaire',
            'description': 'Tous les dinos ont une vitesse de base de 1.0.'
        },
        {
            'name': 'Montagne Rocheuse',
            'description': '+10% de d√©fense pour les dinos Tank, mais -20% d\'attaque pour les dinos DPS.'
        },
        {
            'name': 'Eruption Volcanique',
            'description': '+10% d\'attaque pour les dinos DPS, mais -20% de d√©fense pour les dinos Tank.'
        }
    ]
    
    created_count = 0
    existing_count = 0
    
    print("\n=== Ajout des terrains PvM ===")
    
    for terrain_data in terrains:
        terrain, created = DWPvmTerrain.objects.get_or_create(
            name=terrain_data['name'],
            defaults={
                'description': terrain_data['description']
            }
        )
        
        if created:
            created_count += 1
            print(f"‚úÖ Cr√©√©: {terrain.name}")
        else:
            existing_count += 1
            print(f"‚ö†Ô∏è  Existe d√©j√†: {terrain.name}")
    
    print(f"\nüìä R√©sum√© des terrains:")
    print(f"   - Nouveaux terrains cr√©√©s: {created_count}")
    print(f"   - Terrains d√©j√† existants: {existing_count}")
    print(f"   - Total: {DWPvmTerrain.objects.count()} terrains dans la base de donn√©es")


def run():
    """Main function to populate both abilities and terrains."""
    print("üöÄ D√©but du remplissage de la base de donn√©es PvM...")
    print("=" * 60)
    
    try:
        populate_abilities()
        populate_terrains()
        
        print("\n" + "=" * 60)
        print("‚úÖ Remplissage termin√© avec succ√®s!")
        print(f"üìã Total final:")
        print(f"   - Capacit√©s: {DWPvmAbility.objects.count()}")
        print(f"   - Terrains: {DWPvmTerrain.objects.count()}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du remplissage: {e}")
        raise


if __name__ == "__main__":
    run()